import java.io.Serializable;
public class Plateau implements Serializable{

  protected Pion[][][] plateau;
  protected Coordonnees dernierCoup;

  public Plateau(int x, int y , int z){
    this.plateau = new Pion[x][y][z];
    this.dernierCoup = null;
  }

  /**
    * Renvoie le plateau de jeu
    * @return le plateau de jeu (un tableau tridimensionnel de Pion)
    */
  public Pion[][][] getPlateau(){
    return this.plateau;
  }

  /**
    * Renvoie le pion aux coordonnées passées en argument, ou null
    * @param x la coordonnée x
    * @param y la coordonnée y
    * @param z la coordonnée z
    * @return le Pion à la position passée en argument, ou null s'il n'y en a pas à cette position
    */
  public Pion getPion(int x, int y ,int z){
    if(x >= 0 && y >= 0 && z >= 0 && x < plateau.length && y < plateau[0].length && z < plateau[0][0].length){
      return plateau[x][y][z];
    }

    return null;
  }

  /**
    * Place un Pion aux coordonnées passées en argument
    * Il créé un Pion appartenant au joueur passé en argument
    * Le pion est placé si la place est vide
    * @param x la coordonnée x
    * @param y la coordonnée y
    * @param z la coordonnée z
    * @param joueur le joueur auquel le Pion appartiendra
    * @return true si le Pion a été placé, false sinon
    */
  public boolean setPion(int x, int y, int z, Joueur joueur){
    if(this.getPion(x, y, z) == null){
      plateau[x][y][z] = new Pion(joueur);
      return true;
    }

    return false;
  }

  /**
    * Retire le Pion du haut du pilier passé en argument
    * @param x la coordonnée x du pilier
    * @param y la coordonnée y du pilier
    */
  public void retirerPion(int x, int y){
    for(int z = 3; z >= 0; z--){
      if(this.getPion(x, y, z) != null){
        plateau[x][y][z] = null;
        break;
      }
    }
  }

  /**
    * Place le pion sur le plateau
    * Si le pion est placé, ses coordonnees sont ajoutés dans dernierCoup
    * @param coordonnees les coordonnees du pilier où on veut ajouter un pion
    * @param joueur le joueur qui ajoute son pion
    * @exception ExceptionPilierRempli Soulève une exception si on ne peut pas paser le pion
    */
  public void placer(Coordonnees coordonnees, Joueur joueur) throws ExceptionPilierRempli{

    int x = coordonnees.getX();
    int y = coordonnees.getY();

    boolean placement = false;

    for(int z = 0; z < plateau.length; z++){
      if(this.setPion(x, y, z, joueur) == true){
        placement = true;
        dernierCoup = coordonnees;
        break;
      }
    }

    if(!placement){
      throw new ExceptionPilierRempli(coordonnees);
    }

  }

  public void verifierVictoireBis(){
  	//Variable a initialiser dans le sogo, presente que dans les test de gain
  	boolean gainJ1 = false, gainJ2 = false;

  	// Deux variables necessaire pour les 13 direction possibles 
  	//Initialisation d'un compteur de nombre de pion sur la ligne
	int pionHorizontalesY = 0, pionHorizontalesX = 0, pionVerticalZ = 0, pionHorizontalesMontanteY = 0;
	int pionHorizontalesMontanteX = 0, pionHorizontalesDescendanteY = 0, pionHorizontalesDescendanteX = 0;
	int pionDiagonalXPlus = 0, pionDiagonalXMoins = 0, pionDiagonalXPlusMontante = 0;
	int pionDiagonalXMoinsMontante = 0, pionDiagonalXPlusDescendante = 0, pionDiagonalXMoinsDescendante = 0;

  	//  Stockage de l'id du joueur sur la ligne en cours, initialise a -1 pour différentier des reel id				
	int joueurHorizontaleY = -1, joueurHorizontaleX = -1, joueurVerticalZ = -1, joueurHorizontalesMontanteY = -1;
	int joueurHorizontalesMontanteX = -1, joueurHorizontalesDescendanteY = -1, joueurHorizontalesDescendanteX = -1;
	int joueurDiagonalXPlus = -1, joueurDiagonalXMoins = -1, joueurDiagonalXPlusMontante = -1;
  	int joueurDiagonalXMoinsMontante = -1, joueurDiagonalXPlusDescendante = -1, joueurDiagonalXMoinsDescendante = -1;

  	//Vérifie toute les lignes horizontales a Y, celles horizontales a X et les Verticales en Z
  	for(int i=0; i<4; i++){
  		for(int j=0; j<4; j++){

			//On remet les compteurs a 0, apres chaque ligne
			pionHorizontalesY = 0; pionHorizontalesX = 0; pionVerticalZ = 0;				
			joueurHorizontaleY = -1; joueurHorizontaleX = -1; joueurVerticalZ = -1;

			for(int k=0; k<4; k++){

				// Pour les lignes horizontales a Y ( vers le bas x = j, y = k, z = i)
				//Si la case n'est pas vide
				// Et Si cest un nouveau joueur ou correspond au joueur du coup précèdent
				if(getPion(j, k, i) != null && (joueurHorizontaleY == getPion(j, k, i).getJoueur().getId() || joueurHorizontaleY == -1)){
					joueurHorizontaleY = getPion(j, k, i).getJoueur().getId();
					pionHorizontalesY += 1;
				}
  				// Idem pour les lignes horizontales a X ( vers la droite x = k, y = j, z = i)
  				else if (getPion(k, j, i) != null && (joueurHorizontaleX == getPion(k, j, i).getJoueur().getId() || joueurHorizontaleY == -1)){
  					joueurHorizontaleX = getPion(k, j, i).getJoueur().getId();
  					pionHorizontalesX += 1;
  				}
  				// Idem pour les lignes verticales en Z ( vers le haut x = i, y = j, z = k)
  				else if (getPion(k, j, i) != null && (joueurHorizontaleX == getPion(i, j, k).getJoueur().getId() || joueurHorizontaleY == -1)){
  					joueurVerticalZ = getPion(i, j, k).getJoueur().getId();
  					pionVerticalZ += 1;
  				}  						
			}

			//Test les gains des lignes des 3 directions possibles
			if(pionHorizontalesY == 4){
				if(joueurHorizontaleY == 0){ gainJ1 = true; }
				else { gainJ2 = true; }
			}
			else if(pionHorizontalesX == 4){
				if(joueurHorizontaleX == 0){ gainJ1 = true; }
				else { gainJ2 = true; }
			}
			else if(pionVerticalZ == 4){
				if(joueurVerticalZ == 0){ gainJ1 = true; }
				else { gainJ2 = true; }
			}
  		}
  	}

  	//On va vérifier les lignes Horizontales mais cette fois ci les montantes et descendante
  	// Ainsi que les deux diagonales pour un Z fixe
  	for (int i=0; i < 4; i++) {
  		//On remet les compteurs a 0, apres chaque ligne
		pionHorizontalesMontanteY = 0; pionHorizontalesMontanteX = 0; pionHorizontalesDescendanteY = 0;
		pionHorizontalesDescendanteX = 0; pionDiagonalXPlus = 0; pionDiagonalXMoins = 0;
			
		joueurHorizontalesMontanteY = -1; joueurHorizontalesMontanteX = -1; joueurHorizontalesDescendanteY = -1;
		joueurHorizontalesDescendanteX = -1; joueurDiagonalXPlus = -1; joueurDiagonalXMoins = -1;
  			
  		for (int j=0; j < 4; j++) {

  			// Pour les lignes horizontales a Y montante( vers le bas x = i, y = z = j)
  			//Si la case n'est pas vide
  			// Et Si cest un nouveau joueur ou correspond au joueur du coup précèdent
  			if(getPion(i,j,j) != null && (joueurHorizontalesMontanteY == getPion(i,j,j).getJoueur().getId() || joueurHorizontalesMontanteY == -1)){
  				joueurHorizontalesMontanteY = getPion(i,j,j).getJoueur().getId();
  				pionHorizontalesMontanteY += 1;
  			}
  			// Idem pour les lignes horizontales a X montante ( vers la droite x = z = j, y = i)
  			else if(getPion(j,i,j) != null && (joueurHorizontalesMontanteX == getPion(j,i,j).getJoueur().getId() || joueurHorizontalesMontanteX == -1)){
  				joueurHorizontalesMontanteX = getPion(j,i,j).getJoueur().getId();
  				pionHorizontalesMontanteX += 1;
  			}
  			// Idem pour les lignes horizontales a Y descendante ( vers le bas x = i, y = j, z = j - 3)
  			else if(getPion(i,j,j-3) != null && (joueurHorizontalesDescendanteY == getPion(i,j,j-3).getJoueur().getId() || joueurHorizontalesDescendanteY == -1)){
  				joueurHorizontalesDescendanteY = getPion(i,j,j-3).getJoueur().getId();
  				pionHorizontalesDescendanteY += 1;
  			}	
  			// Idem pour les lignes horizontales a X descendante ( vers la droite x = j, y = i, z = i -3)
  			else if(getPion(j,i,i-3) != null && (joueurHorizontalesDescendanteX == getPion(j,i,i-3).getJoueur().getId() || joueurHorizontalesDescendanteX == -1)){
  				joueurHorizontalesDescendanteX = getPion(j,i,i-3).getJoueur().getId();
  				pionHorizontalesDescendanteX += 1;
  			}
			// Idem pour les lignes diagonale X Plus (x = j, y = j, z = i)
  			else if(getPion(j,j,i) != null && (joueurDiagonalXPlus == getPion(j,j,i).getJoueur().getId() || joueurDiagonalXPlus == -1)){
  				joueurDiagonalXPlus = getPion(j,j,i).getJoueur().getId();
  				pionDiagonalXPlus += 1;
  			}
			// Idem pour les lignes diagonale X Moins( x = 3-j, y = j, z = i)
  			else if(getPion(3-j,j,i) != null && (joueurDiagonalXMoins == getPion(3-j,j,i).getJoueur().getId() || joueurDiagonalXMoins == -1)){
  				joueurDiagonalXMoins = getPion(j,j,i).getJoueur().getId();
  				pionDiagonalXMoins += 1;
  			}
  		}

  		//Test les gains des lignes des 6 directions possibles
		if(pionHorizontalesMontanteY == 4){
			if(joueurHorizontalesMontanteY == 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}
		else if(pionHorizontalesMontanteX == 4){
			if(joueurHorizontalesMontanteX == 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}
		else if(pionHorizontalesDescendanteY == 4){
			if(joueurHorizontalesDescendanteY == 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}
		else if(pionHorizontalesDescendanteX == 4){
			if(joueurHorizontalesDescendanteX == 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}
		else if(pionDiagonalXPlus == 4){
			if(joueurDiagonalXPlus == 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}	
		else if(pionDiagonalXMoins == 4){
			if(joueurDiagonalXMoins== 0){ gainJ1 = true; }
			else { gainJ2 = true; }
		}	
  	}

  	//On va vérifier les deux diagonale mais cette fois ci les montantes et descendante
  	for (int i=0; i < 4; i++) {

  		// Pour la DiagonalXPlusMontante(x = y = z = i)
  		//Si la case n'est pas vide
  		// Et Si cest un nouveau joueur ou correspond au joueur du coup précèdent
  		if(getPion(i,i,i) != null && (joueurDiagonalXPlusMontante == getPion(i,i,i).getJoueur().getId() || joueurDiagonalXPlusMontante == -1)){
  			joueurDiagonalXPlusMontante = getPion(i,i,i).getJoueur().getId();
  			pionDiagonalXPlusMontante += 1;
  		}
		// Idem pour les  DiagonalXMoinsMontante(x = 3-y, y = z = i)
		else if(getPion(3-i,i,i) != null && (joueurDiagonalXMoinsMontante == getPion(3-i,i,i).getJoueur().getId() || joueurDiagonalXMoinsMontante == -1)){
  			joueurDiagonalXMoinsMontante = getPion(3-i,i,i).getJoueur().getId();
  			pionDiagonalXMoinsMontante += 1;
  		}
		// Idem pour les  DiagonalXPlusDescendante(x = i, y = i, z = 3-i)
  		if(getPion(i,i,i) != null && (joueurDiagonalXPlusDescendante == getPion(i,i,i).getJoueur().getId() || joueurDiagonalXPlusDescendante == -1)){
  			joueurDiagonalXPlusDescendante = getPion(i,i,i).getJoueur().getId();
  			pionDiagonalXPlusDescendante += 1;
  		}
		// Idem pour les  DiagonalXMoinsDescendante(x = z = 3-i, y = i)
  		else if(getPion(3-i,i,3-i) != null && (joueurDiagonalXMoinsDescendante == getPion(3-i,i,3-i).getJoueur().getId() || joueurDiagonalXMoinsDescendante == -1)){
  			joueurDiagonalXMoinsDescendante = getPion(3-i,i,3-i).getJoueur().getId();
  			pionDiagonalXMoinsDescendante += 1;
  		}
  	}
  	
  	// Fin du for: Test les gains des lignes des 4 directions possibles
	if(pionDiagonalXPlusMontante == 4){
		if(joueurDiagonalXPlusMontante == 0){ gainJ1 = true; }
		else { gainJ2 = true; }
	}
	else if(pionDiagonalXMoinsMontante == 4){
		if(joueurDiagonalXMoinsMontante == 0){ gainJ1 = true; }
		else { gainJ2 = true; }
	}
	else if(pionDiagonalXPlusDescendante == 4){
		if(joueurDiagonalXPlusDescendante == 0){ gainJ1 = true; }
		else { gainJ2 = true; }
	}
	else if(pionDiagonalXMoinsDescendante == 4){
		if(joueurDiagonalXMoinsDescendante == 0){ gainJ1 = true; }
		else { gainJ2 = true; }
	}
  }//Fin vérifBIS

  /**
    * Vérifie si un des joueurs a gagné la partie ou non
    * Regarde les conditions de victoire à partir des coordonnées du dernier pion placé , pour optimiser la vérification
    * @return true si un des joueurs à gagné la partie, false sinon
    */
  	public boolean verifierVictoire(){
		//D'abord il faut trouver l'emplacement exact du dernier coup joué
		int X = dernierCoup.getX();
		int Y = dernierCoup.getY();
		int Z=plateau[0][0].length-1; // on se place en haut du plateau

		while (getPion(X, Y, Z)==null){
			//On descend le pilier jusqu'à trouver un pion, qui est logiquement le dernier joué.
			Z--;
		}

		// On a à présent nos coordonnées X, Y, Z du dernier pion posé. On récupère le joueur de ce pion.
		int joueur = getPion(X, Y, Z).getJoueur().getId();

		// On utilise des coordonnées temporaire x, y, z.
		int x=X;
		int y=Y;
		int z=Z;

		// Vérification en x.
		while(getPion(x-1,y,z)!=null && getPion(x-1, y, z).getJoueur().getId()==joueur){ // Tant qu'on peut translater en x en restant sur les pion du joueur en cours...
			x = x-1; // ...On le fait.
		}

		// On initialise un compteur pour compter le nombre de pions alignés
		int cpt=1;

		while(getPion(x+1,y,z)!=null && getPion(x+1, y, z).getJoueur().getId()==joueur){ // Tant qu'on peut translater en x dans l'autre sens en restant sur les pion du joueur en cours...
			x = x+1; // ...On le fait...
			cpt++; // ...Et on incrémente le compteur pour compter le nombre de pions alignés.
		}

		if(cpt>=4){
			return true; // Si on a compté plus de 4 pions alignés, on retourne Vrai.
		}

		// Même chose en y, en z et pour les diagonales.
		x=X;
		y=Y;
		z=Z;

		while(getPion(x,y-1,z)!=null && getPion(x, y-1, z).getJoueur().getId()==joueur){
			y = y-1;
		}

		cpt=1;

		while(getPion(x,y+1,z)!=null && getPion(x, y+1, z).getJoueur().getId()==joueur){
			y = y+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x,y,z-1)!=null && getPion(x, y, z-1).getJoueur().getId()==joueur){
			z = z-1;
		}

		cpt=1;

		while(getPion(x,y,z+1)!=null && getPion(x, y, z+1).getJoueur().getId()==joueur){
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1,y,z-1)!=null && getPion(x-1, y, z-1).getJoueur().getId()==joueur){
			x = x-1;
			z = z-1;
		}

		cpt=1;

		while(getPion(x+1,y,z+1)!=null && getPion(x+1, y, z+1).getJoueur().getId()==joueur){
			x = x+1;
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1,y,z+1)!=null && getPion(x-1, y, z+1).getJoueur().getId()==joueur){
			x = x-1;
			z = z+1;
		}

		cpt=1;

		while(getPion(x+1,y,z-1)!=null && getPion(x+1, y, z-1).getJoueur().getId()==joueur){
			x = x+1;
			z = z-1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1, y-1, z)!=null && getPion(x-1, y-1, z).getJoueur().getId()==joueur){
			x = x-1;
			y = y-1;

		}

		cpt=1;

		while(getPion(x+1, y+1, z)!=null && getPion(x+1, y+1, z).getJoueur().getId()==joueur){
			x = x+1;
			y = y+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1, y+1, z)!=null && getPion(x-1, y+1, z).getJoueur().getId()==joueur){
			x = x-1;
			y = y+1;

		}

		cpt=1;

		while(getPion(x+1, y-1, z)!=null && getPion(x+1, y-1, z).getJoueur().getId()==joueur){
			x = x+1;
			y = y-1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x,y-1,z-1)!=null && getPion(x, y-1, z-1).getJoueur().getId()==joueur){
			y = y-1;
			z = z-1;
		}

		cpt=1;

		while(getPion(x,y+1,z+1)!=null && getPion(x, y+1, z+1).getJoueur().getId()==joueur){
			y = y+1;
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x,y-1,z+1)!=null && getPion(x, y-1, z+1).getJoueur().getId()==joueur){
			y = y-1;
			z = z+1;
		}

		cpt=1;

		while(getPion(x,y+1,z-1)!=null && getPion(x, y+1, z-1).getJoueur().getId()==joueur){
			y = y+1;
			z = z-1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1,y-1,z-1)!=null && getPion(x-1, y-1, z-1).getJoueur().getId()==joueur){
			x = x-1;
			y = y-1;
			z = z-1;
		}

		cpt=1;

		while(getPion(x+1,y+1,z+1)!=null && getPion(x+1, y+1, z+1).getJoueur().getId()==joueur){
			x = x+1;
			y = y+1;
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1,y-1,z+1)!=null && getPion(x-1, y-1, z+1).getJoueur().getId()==joueur){
			x = x-1;
			y = y-1;
			z = z+1;
		}

		cpt=1;

		while(getPion(x+1,y+1,z-1)!=null && getPion(x+1, y+1, z-1).getJoueur().getId()==joueur){
			x = x+1;
			y = y+1;
			z = z-1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1, y+1, z-1)!=null && getPion(x-1, y+1, z-1).getJoueur().getId()==joueur){
			x = x-1;
			y = y+1;
			z = z-1;
		}

		cpt=1;

		while(getPion(x+1, y-1, z+1)!=null && getPion(x+1, y-1, z+1).getJoueur().getId()==joueur){
			x = x+1;
			y = y-1;
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}

		x=X;
		y=Y;
		z=Z;

		while(getPion(x-1, y+1, z+1)!=null && getPion(x-1, y+1, z+1).getJoueur().getId()==joueur){
			x = x-1;
			y = y+1;
			z = z-1;
		}

		cpt=1;

		while(getPion(x+1, y-1, z-1)!=null && getPion(x+1, y-1, z-1).getJoueur().getId()==joueur){
			x = x+1;
			y = y-1;
			z = z+1;
			cpt++;
		}

		if(cpt>=4){
			return true;
		}
		return false;
	}

  public class Pion implements Serializable{

    private Joueur joueur;

    public Pion(Joueur joueur){
      this.joueur = joueur;
    }

    /**
      * Renvoie le joueur auquel appartient ce Pion
      * @return le joueur auquel appartient ce Pion
      */
    public Joueur getJoueur(){
      return this.joueur;
    }
  }
}
