public class IA extends Joueur{

  boolean tourner;

  //Pour la fonction evaluation()
  private int bloque1;
  private int bloque2;
  private int bloque3;
  private int ligne1;
  private int ligne2;
  private int ligne3;
  private int ligne4;
  private int profondeur;

  /**
    * Constructeur d'une IA
    * @param nom le nom pour l'IA
    * @param profondeur le nombre de coup successifs de l'IA analysés
    * @param comportement le type de comportement voulu (1 "egoïste", 2 "agressif", 3 "intelligent")
    */
  public IA(String nom, int profondeur, int comportement){
    super(nom, null);

    this.profondeur = profondeur*2; //*2 car on évalue le coup de l'IA ET de l'adversaire
    this.tourner = true;

    if(comportement == 1) {
      initComportement1();
    } else if(comportement == 2){
      initComportement2();
    } else {
      initComportement3();
    }
  }

  /**
    * Initialise les points pour les coups pour le comportement 1
    */
  public void initComportement1(){
    this.bloque1 = 10;
    this.bloque2 = 80;
    this.bloque3 = 327680;
    this.ligne1 = 640;
    this.ligne2 = 5120;
    this.ligne3 = 40960;
    this.ligne4 = 2621440;
  }

  /**
    * Initialise les points pour les coups pour le comportement 2
    */
  public void initComportement2(){
    this.bloque1 = 80;
    this.bloque2 = 40960;
    this.bloque3 = 327680;
    this.ligne1 = 10;
    this.ligne2 = 640;
    this.ligne3 = 5120;
    this.ligne4 = 2621440;
  }

  /**
    * Initialise les points pour les coups pour le comportement 3
    */
  public void initComportement3(){
    this.bloque1 = 10;
    this.bloque2 = 80;
    this.bloque3 = 327680;
    this.ligne1 = 10;
    this.ligne2 = 80;
    this.ligne3 = 640;
    this.ligne4 = 2621440;
  }

  public int demanderNbQuartDeTour(Plateau plateau, Affichage affichage, Write file, Joueur j, String mode, String nomfichier){
    if(tourner){
      return 1;
    } else {
      return 0;
    }
  }

  /**
    * Fonction de l'IA annalysant le plateau de jeu et retournant les coordonnees où elle place son pion
    * Appelle evaluation() pour savoir où placer le pion si la profondeur est 0
    * Appelle analyse() pour analyser les prochain coups si la profondeur est plus grande que 0
    * @param plateau le plateau du jeu sur lequel le joueur joue
    * @return les coordonnees où le joueur veut placer son pion
    */
    //TODO : RAJOUTER VARIABLE ALEATOIRE (0,1)
  public Coordonnees demanderCoup(Plateau plateau, Affichage affichage, Write file, String mode, String nomfichier){
    int max = -3000000;
    int valeur = 0;
    int valeur2 = 0;
    Coordonnees coordonnees = new Coordonnees(-1, -1);
    int profondeurInitiale = this.profondeur;
    boolean plateauTournant = plateau instanceof PlateauTournant;

    this.tourner = false;

    if(mode.equals("lecture")){
      String[] str1 = null;
      Read lire = new Read();
      str1 = (lire.readLine(nomfichier)).split(",");

      return (new Coordonnees(Integer.parseInt(str1[0]), Integer.parseInt(str1[1])));
    }

    for (int i = 0; i < plateau.getPlateau().length; i++){
      for (int j = 0; j < plateau.getPlateau()[i].length ; j++) {
        try{
          //On place le pion temporairement...
          plateau.placer(new Coordonnees(i, j), this);

          //On fait l'évaluation du coup
          valeur = evaluation(plateau, new Coordonnees(i, j), true);

          //Si la profondeur est 0 et si le coup que vient de jouer l'IA n'est pas un coup gagnant
          if(profondeur > 0 && valeur < 2621440){
            this.profondeur--;
            valeur += analyse(plateau, false);
            this.profondeur = profondeurInitiale;
          }

          if (valeur > max){
            max = valeur;
            coordonnees = new Coordonnees(i, j);
          }

          //... On retire le pion placé temporairement
          plateau.retirerPion(i, j);
        } catch(ExceptionPilierRempli e){
          //On ne fait rien
        }
      }
    }

    if(plateauTournant && ((PlateauTournant)plateau).getNbQuartDeTourJoueur(this.getId()) > 0){
      ((PlateauTournant)plateau).tournerCentre();

      System.out.println("Je suis rentré dans le TOURNANT");
      System.out.println("ID du joueur : " + this.getId());
      System.out.println(" : " + ((PlateauTournant)plateau).getNbQuartDeTourJoueur(this.getId()));

      for (int i = 0; i < plateau.getPlateau().length; i++){
        for (int j = 0; j < plateau.getPlateau()[i].length ; j++) {
          try{
            int k = -1;
            int l = -1;

            //On place le pion temporairement...
            plateau.placer(new Coordonnees(i, j), this);

            //On fait l'évaluation du coup
            valeur = evaluation(plateau, new Coordonnees(i, j), true);

            //Si la profondeur est 0 et si le coup que vient de jouer l'IA n'est pas un coup gagnant
            if(profondeur > 0 && valeur < 2621440){
              ((PlateauTournant)plateau).setNbQuartDeTourJoueur(this.getId(), ((PlateauTournant)plateau).getNbQuartDeTourJoueur(this.getId()) - 1);
              this.profondeur--;
              valeur += analyse(plateau, false);
              this.profondeur = profondeurInitiale;
              ((PlateauTournant)plateau).setNbQuartDeTourJoueur(this.getId(), ((PlateauTournant)plateau).getNbQuartDeTourJoueur(this.getId()) + 1);
            }

            if (valeur > max){
              max = valeur;

              //Comme on tourne, les coordonnees du placement sont celles avant de tourner le plateau
              if(i == 1 && j == 1){
                System.out.println("UN");
                k = 1;
                l = 2;
              } else if(i == 1 && j == 2){
                System.out.println("DEUX");
                k = 2;
                l = 2;
              } else if(i == 2 && j == 2){
                System.out.println("TROIS");
                k = 2;
                l = 1;
              } else if(i == 2 && j == 1){
                System.out.println("QUATRE");
                k = 1;
                l = 1;
              } else {
                System.out.println("CINQ");
                k = i;
                l = j;
              }

              System.out.println("Je suis là et je met " + k + ", " + l);
              coordonnees = new Coordonnees(k, l);
              this.tourner = true;
            }

            //... On retire le pion placé temporairement
            plateau.retirerPion(i, j);
          } catch(ExceptionPilierRempli e){
            //On ne fait rien
          }
        }
      }
      //On remet en place ce qu'on a tourné
      for(int i = 0; i < 3; i++){
        ((PlateauTournant)plateau).tournerCentre();
      }
    }

    file.write(this.getNom() + " : " + coordonnees.getX() + "," + coordonnees.getY());

    System.out.println("AU FINAL, LA VALEUR MAX QUE J'AI TROUVE EST : " + max);
    System.out.println("JE PLACE DONC AUX COORDONNEES : " + coordonnees);

    return coordonnees;
  }

  /**
    * Analyse les coups de l'IA ou ceux de son adversaire
    * @param plateau le plateau du jeu sur lequel le joueur joue
    * @param bool true si c'est l'IA qu'on analyse, false si c'est l'adversaire qu'on analyse
    * @return la valeur du meilleur coup possible
    */
  public int analyse(Plateau plateau, boolean bool){
    int max = -3000000;
    int min = 3000000; //Plus que la valeur de coup maximale possible
    int valeur = 0;
    Coordonnees coordonnees = new Coordonnees(-1, -1);
    int profondeurInitiale = this.profondeur;
    boolean plateauTournant = plateau instanceof PlateauTournant;
    int idJoueurActuel = 0;

    System.out.println("JE RENTRE DANS ANALYSE");

    //On trouve l'id du joueur qui joue
    if(!bool){
      if(this.getId() == 0){
        idJoueurActuel = 1;
      } else {
        idJoueurActuel = 0;
      }
    } else {
      idJoueurActuel = this.getId();
    }

    for (int i = 0; i < plateau.getPlateau().length; i++){
      for (int j = 0; j < plateau.getPlateau()[i].length ; j++) {
        try{
          //On place le pion temporairement...
          //Si on est avec l'IA (bool == true)
          if(bool){
            plateau.placer(new Coordonnees(i, j), this);
          } else{
            //Sinon on créé un joueur temporaire
            //On peut se permettre de faire ça car on teste juste à chaque fois
              //si le pion auquel appartient le joueur est l'IA ou pas
            plateau.placer(new Coordonnees(i, j), new Humain("TmpPlayer", new ScannerInput()));
          }

          //On évalue le coup placé
          valeur = evaluation(plateau, new Coordonnees(i, j), bool);

          //On continue d'appeler analyse s'il reste de la profondeur et si le coup n'est pas gagnant
          if(profondeur > 0 && valeur > -2621440 && valeur < 2621440) {
            this.profondeur--;
            if(bool){ //si c'était l'IA qui était analysée ...
              valeur += analyse(plateau, false); //... on analyse son adversaire maintenant...
            } else { //... et inversement
              valeur += analyse(plateau, true);
            }
            this.profondeur = profondeurInitiale;
          }

          if(bool){
            //Si on analyse pour l'IA, on prend le max
            if (valeur > max){
              max = valeur;
              coordonnees = new Coordonnees(i, j);
            }
          } else {
            //Sinon, on analyse pour son adversaire, du coup on prend le min
            if(valeur < min){
              min = valeur;
              coordonnees = new Coordonnees(i, j);
            }
          }

          System.out.println("JE REGARDAIS EN " + i + ", " + j);

          //... On retire le pion placé temporairement
          plateau.retirerPion(i, j);
        } catch(ExceptionPilierRempli e){
          //On ne fait rien
        }
      }
    }

    if(plateauTournant && ((PlateauTournant)plateau).getNbQuartDeTourJoueur(idJoueurActuel) > 0){
      ((PlateauTournant)plateau).tournerCentre();

      System.out.println("JE TOURNE");

      for (int i = 0; i < plateau.getPlateau().length; i++){
        for (int j = 0; j < plateau.getPlateau()[i].length ; j++) {
          try{
            //On place le pion temporairement...
            plateau.placer(new Coordonnees(i, j), this);

            //On fait l'évaluation du coup
            valeur = evaluation(plateau, new Coordonnees(i, j), true);

            //Si la profondeur est 0 et si le coup que vient de jouer l'IA n'est pas un coup gagnant
            if(profondeur > 0 && valeur < 2621440){
              ((PlateauTournant)plateau).setNbQuartDeTourJoueur(idJoueurActuel, ((PlateauTournant)plateau).getNbQuartDeTourJoueur(idJoueurActuel) - 1);
              if(bool){ //si c'était l'IA qui était analysée ...
                valeur += analyse(plateau, false); //... on analyse son adversaire maintenant...
              } else { //... et inversement
                valeur += analyse(plateau, true);
              }
              ((PlateauTournant)plateau).setNbQuartDeTourJoueur(idJoueurActuel, ((PlateauTournant)plateau).getNbQuartDeTourJoueur(idJoueurActuel) + 1);
            }

            if (valeur > max){
              int k;
              int l;

              max = valeur;

              //Comme on tourne, les coordonnees du placement sont celles avant de tourner le plateau
              if(i == 1 && j == 1){
                k = 1;
                l = 2;
              } else if(i == 1 && j == 2){
                k = 2;
                l = 2;
              } else if(i == 2 && j == 2){
                k = 2;
                l = 1;
              } else {
                k = 1;
                l = 1;
              }

              coordonnees = new Coordonnees(k, l);
            }

            System.out.println("JE REGARDAIS EN " + i + ", " + j);

            //... On retire le pion placé temporairement
            plateau.retirerPion(i, j);
          } catch(ExceptionPilierRempli e){
            //On ne fait rien
          }
        }
      }
      //Si c'est un plateau tournant, on remet en place ce qu'on a tourné
      if(plateauTournant){
        for(int i = 0; i < 3; i++){
          ((PlateauTournant)plateau).tournerCentre();
        }
      }
    }

    if(bool){
      //Si on analyse pour l'IA, on renvoie le max
      return max;
    } else {
      //Sinon, on analyse pour son adversaire, du coup on renvoie le min
      return min;
    }

    System.out.println("J'AI FINI ANALYSE");
  }

  /**
    * Evalue la valeur du coup à une coordonnée
    * Utilise les attributs de la classe pour savoir la valeur des coups selon le comportement
    * @param plateau le plateau de jeu
    * @param coordonnees les coordonnees où on évalue le placement
    * @param bool true si le joueur est l'IA, false si c'est l'adversaire qu'on évalue
    * @return la valeur de l'evaluation si le pion est placé à ces coordonnées
    */
  public int evaluation(Plateau plateau, Coordonnees coordonnees, boolean bool){
    int X = coordonnees.getX();
    int Y = coordonnees.getY();
    int Z = plateau.getPlateau()[0][0].length-1; // on se place en haut du plateau

    //On récupère Z
		while (plateau.getPion(X, Y, Z) == null){
			//On descend le pilier jusqu'à trouver un pion, qui est logiquement le dernier joué.
			Z--;
		}

    int sommeEvaluation = 0;

    sommeEvaluation += evaluationVerticale(plateau, bool, X, Y);
    sommeEvaluation += evaluationHorizontale(plateau, bool, X, Y, Z); //Vérifie sur X et Y horizontalement

    if(X + Z == 3) {
      sommeEvaluation += evalutationDiagonaleTrancheX(plateau, bool, Y);
    }
    if(X == Z) {
      sommeEvaluation += evaluationDiagonaleXZ(plateau, bool, Y);
    }
    if(Y + Z == 3){
      sommeEvaluation += evalutationDiagonaleTrancheY(plateau, bool, X);
    }
    if(X + Y == 3) {
      sommeEvaluation += evaluationDiagonaleTrancheZ(plateau, bool, Z);
    }
    if (Y == Z){
      sommeEvaluation += evaluationDiagonaleYZ(plateau, bool, X);
    }
    if(X == Y){
      sommeEvaluation += evaluationDiagonaleXY(plateau, bool, Z);
    }
    if(X == Y && Z == 3 - X){
      sommeEvaluation += evaluationDiagonaleDiagonaleXY(plateau, bool);
    }
    if(X == Z && Y == 3 - X){
      sommeEvaluation += evaluationDiagonaleDiagonaleXZ(plateau, bool);
    }
    if(Y == Z && X == 3 - Y){
      sommeEvaluation += evaluationDiagonaleDiagonaleYZ(plateau, bool);
    }
    if(X == Y && Y == Z){
      sommeEvaluation += evaluationDiagonaleDiagonaleXYZ(plateau, bool);
    }

    //System.out.println("L'évaluation sur la colonne : " + coordonnees + " vaut : " + sommeEvaluation + " points.");

    //TODO : mettre en paramètre le randomness
    if(bool){
      return sommeEvaluation + ((int) (Math.random() * 9));
    } else {
      return -sommeEvaluation - ((int) (Math.random() * 9));
    }
  }

  /**
    * Attribut le nombre de points
    */
  public int attributionPoints(int nbPionsJoueurEvalue, int nbPionsAdversaire){
    int nbPoints = 0;

    switch(nbPionsJoueurEvalue) {
      case 1 :
        nbPoints += ligne1;
        break;
      case 2 :
        nbPoints += ligne2;
        break;
      case 3 :
        nbPoints += ligne3;
        break;
      case 4 :
        nbPoints += ligne4;
        break;
    }

    switch(nbPionsAdversaire) {
      case 1 :
        nbPoints += bloque1;
        break;
      case 2 :
        nbPoints += bloque2;
        break;
      case 3 :
        nbPoints += bloque3;
        break;
    }

    return nbPoints;
  }

  //TODO : Le problème c'est qu'il évalue selon l'IA, et non pas de l'IA OU de l'adversaire pour la V2
  public int attributionPointsV2(int nbPionsJoueurEvalue, int nbPionsAdversaire){
    int nbPoints = 0;

    switch(nbPionsJoueurEvalue) {
      case 1 :
        if(nbPionsAdversaire == 0) {
          nbPoints += ligne1;
        }
        break;
      case 2 :
        if(nbPionsAdversaire == 0) {
          nbPoints += ligne2;
        }
        break;
      case 3 :
        if(nbPionsAdversaire == 0) {
          nbPoints += ligne3;
        }
        break;
      case 4 :
        nbPoints += ligne4;
        break;
    }

    switch(nbPionsAdversaire) {
      case 1 :
        if(nbPionsJoueurEvalue == 1){
          nbPoints += bloque1;
        }
        break;
      case 2 :
        if(nbPionsJoueurEvalue == 1){
          nbPoints += bloque2;
        }
        break;
      case 3 :
        nbPoints += bloque3;
        break;
    }

    return nbPoints;
  }

  public int evaluationVerticale(Plateau plateau, boolean bool, int x, int y){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;


    for(int z = 0; z < 4; z++) {
      Plateau.Pion pion = plateau.getPion(x, y, z);

      if(pion != null) {
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)) {
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationHorizontale(Plateau plateau, boolean bool,int x, int y, int z){ //Vérifie sur X et Y horizontalement
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;


    //On fait la première attribution de points en regardant la ligne des X
    for(int i = 0; i < 4; i++){
      Plateau.Pion pion = plateau.getPion(i, y, z);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    int attribution1 = attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);

    nbPionsJoueurEvalue = 0;
    nbPionsAdversaire = 0;

    //On fait la deuxième attribution de points en regardant la ligne des Y
    for(int i = 0; i < 4; i++){
      Plateau.Pion pion = plateau.getPion(x, i, z);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attribution1 + attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evalutationDiagonaleTrancheX(Plateau plateau, boolean bool,int y){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;


    for(int x = 0; x < 4; x++){
      int z = 3 - x;

      Plateau.Pion pion = plateau.getPion(x, y, z);

      if(pion != null) {
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evalutationDiagonaleTrancheY(Plateau plateau, boolean bool,int x){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int y = 0; y < 4; y++){
      int z = 3 - y;

      Plateau.Pion pion = plateau.getPion(x, y, z);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleTrancheZ(Plateau plateau, boolean bool,int z){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;


    for(int x = 0; x < 4; x++){
      int y = 3 - x;

      Plateau.Pion pion = plateau.getPion(x, y, z);

      if(pion != null) {
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleXZ(Plateau plateau, boolean bool,int y){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int x = 0; x < 4; x++){
      Plateau.Pion pion = plateau.getPion(x, y, x);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleYZ(Plateau plateau, boolean bool,int x){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int y = 0; y < 4; y++){
      Plateau.Pion pion = plateau.getPion(x, y, y);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleXY(Plateau plateau, boolean bool,int z){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int x = 0; x < 4; x++){
      Plateau.Pion pion = plateau.getPion(x, x, z);
      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleDiagonaleXY(Plateau plateau, boolean bool){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int x = 0; x < 4; x++){
      int z = 3 - x;

      Plateau.Pion pion = plateau.getPion(x, x, z);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleDiagonaleXZ(Plateau plateau, boolean bool){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int x = 0; x < 4; x++){
      int y = 3 - x;

      Plateau.Pion pion = plateau.getPion(x, y, x);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleDiagonaleYZ(Plateau plateau, boolean bool){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int y = 0; y < 4; y++){
      int x = 3 - y;

      Plateau.Pion pion = plateau.getPion(x, y, y);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

  public int evaluationDiagonaleDiagonaleXYZ(Plateau plateau, boolean bool){
    int nbPionsJoueurEvalue = 0;
    int nbPionsAdversaire = 0;

    for(int x = 0; x < 4; x++){
      Plateau.Pion pion = plateau.getPion(x, x, x);

      if(pion != null){
        Joueur joueur = pion.getJoueur();

        if((bool && joueur == this) || (!bool && joueur != this)){
          nbPionsJoueurEvalue++;
        } else {
          nbPionsAdversaire++;
        }
      }
    }

    return attributionPointsV2(nbPionsJoueurEvalue, nbPionsAdversaire);
  }

}
